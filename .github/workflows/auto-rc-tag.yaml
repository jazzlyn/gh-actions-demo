---
# create a github workflow to auto tag with the branch name version suffix -rc{count}
# where count is a counter increasing on each new tag created by this workflow
# on release/* branch
# use github api to create the tag and push it to the repo
name: auto-rc-tag

on:
  workflow_call:
    inputs:
      runner:
        description: '["some-runners"]'
        required: true
        type: string
  # push:
  #   branches:
  #     - release/*

jobs:
  tag:
    runs-on: ${{fromJSON(inputs.runner)}}
    steps:
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5
        # determine the tag name by checking last tag in this branch matching the branch pattern
        # f.e. release/1.0.0 -> 1.0.0-rc1 if no tag found, 1.0.0-rc2 if 1.0.0-rc1 found, etc.
      - name: Determine tag name
        id: tag
        run: |
          # get the last tag matching the branch name pattern
          tag=$(git describe --tags --match "release/*" --abbrev=0)
          # if no tag found, use the branch name as tag name
          if [ -z "$tag" ]; then
            tag=$(echo "${GITHUB_REF#refs/heads/}" | tr / -)
          fi
          # if tag found, increment the rc counter
          if [[ $tag =~ -rc[0-9]+$ ]]; then
            rc=$(echo $tag | sed -e 's/.*-rc\([0-9]\+\)$/\1/')
            tag=$(echo $tag | sed -e 's/-rc[0-9]\+$//')
            rc=$((rc+1))
            tag="$tag-rc$rc"
          else
            tag="$tag-rc1"
          fi
          echo "tag=$tag" >> $GITHUB_OUTPUT
      - name: Create tag
        id: create_tag
        uses: actions/github-script@ed597411d8f924073f98dfc5c65a23a2325f34cd # v8
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const tag = '${{ steps.tag.outputs.tag }}'
            const ref = `refs/tags/${tag}`
            const sha = context.sha
            const octokit = github.getOctokit('${{ secrets.GITHUB_TOKEN }}')
            octokit.git.createRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: ref,
              sha: sha
            })
            return tag
